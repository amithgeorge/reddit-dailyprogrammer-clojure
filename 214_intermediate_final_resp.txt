After implementing the various suggestions in this thread, I was able to reduce the execution time down to 10s.

Original code - https://github.com/amithgeorge/reddit-dailyprogrammer-clojure/blob/56ce1dbb6a08e96150dc85934caecfeb68108a53/src/rdp/214_intermediate.clj
Command - `lein run -m 214-intermediate 1`
Time taken - ~500s

Optimized code - https://github.com/amithgeorge/reddit-dailyprogrammer-clojure/blob/0f49b7979f9c2e0e7a522f5ad875de0807d4e2da/src/rdp/214_intermediate_arr.clj
Command - `lein run -m rdp.214-intermediate-arr 1 true`
Time taken - ~10s

Some of the suggestions that were implemented in the optimized code

 - Use the latest version of Clojure and Java. At the time of writing - Clojure 1.7.0-beta3 and Java 8u45

 - Set proper jvm options in project.clj

:jvm-opts ^:replace ["-Xms1024m" "-Xmx1g" "-server"]

 - Add the following lines immediately after the namespace declaration. These help in performing math operations using primitives instead of boxed objects. Adding appropriate type hints helps remove the warnings and improve performance tremendously. This also disables the overflow check, so use with caution.

(set! *unchecked-math* :warn-on-boxed)
(set! *warn-on-reflection* true)

 - Parse the input numbers into long and double, instead of int or float.

 - Store the data in records instead of maps. Add appropriate type hints to the record declaration. Access the data within the records using direct field access instead of keyword lookup. Add type hints for the record to functions/variables that access the record.

 - Transient collections have better perf than persistent collections. Don't let the transient get exposed outside the function.

 - Native arrays have way better performance than even transients. They are mutable, so care needs to be taken.

The following two points seem to be true for my specific case, though I haven't yet figured out why.

 - For iterating through every cell in a grid, nested loop-recur is faster than a reduce.
